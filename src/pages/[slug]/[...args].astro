---
import SiteLayout from "@layouts/SiteLayout.astro";
import DefinitionPage from "@components/DefinitionPage.astro";
import {
  findProject,
  listAllResources,
  listProjects,
  parseGVKRef,
} from "@lib/kube";
import HomePage from "@components/HomePage.astro";

export async function getStaticPaths() {
  const paths: Array<{ params: { slug: string; args: string } }> = [];

  const projects = await listProjects();
  for (const project of projects) {
    if (!project.tags || project.tags.length === 0) {
      continue;
    }

    // For each tag, list all resources and create paths
    for (const tag of project.tags) {
      const isLatest = tag === project.tags[0];

      if (!isLatest) {
        paths.push({
          params: {
            slug: project.slug,
            args: tag,
          },
        });
      }

      const resources = await listAllResources(project.slug, tag);
      for (const resource of resources) {
        const gvkRef = [
          resource.gvk.group,
          resource.gvk.version,
          resource.gvk.kind,
        ].join("/");

        const args = isLatest ? [gvkRef] : [tag, gvkRef];

        paths.push({
          params: {
            slug: project.slug,
            args: args.join("/"),
          },
        });
      }
    }
  }

  return paths;
}

const { slug, args } = Astro.params;

if (!slug || !args) {
  return new Response("Not found", { status: 404 });
}

const project = await findProject(slug);
if (!project) {
  return new Response("Not found", { status: 404 });
}

const argsArray = args.split("/");
const hasTagArg = project.tags.includes(argsArray[0]);

const tag = hasTagArg ? argsArray[0] : project.tags[0];
const gvkRef = hasTagArg ? argsArray.slice(1).join("/") : argsArray.join("/");

const gvk = parseGVKRef(gvkRef);
const apiVersion = gvk.group ? `${gvk.group}/${gvk.version}` : gvk.version;
---

{
  apiVersion ? (
    <SiteLayout
      title={`${project.name} ${tag} Spec: ${gvk.kind}`}
      description={`Documentation, properties, change history, types, and examples for ${gvk.kind} ${apiVersion}`}
      noIndex={tag !== project.tags[0]}
      slug={slug}
      tag={tag}
      gvkRef={gvkRef}
    >
      <DefinitionPage project={project} tag={tag} gvk={gvk} />
    </SiteLayout>
  ) : (
    <SiteLayout
      title={`${project.name} ${tag} Spec: Reference Guide and Documentation`}
      description={`Find the documentation for all ${project.name} custom resources, properties, types and even some examples!`}
      noIndex={tag !== project.tags[0]}
      slug={slug}
      tag={tag}
      gvkRef={gvkRef}
    >
      <HomePage project={project} tag={tag} />
    </SiteLayout>
  )
}
